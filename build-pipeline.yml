- name: Build and Push Application Image
  hosts: localhost
  connection: local
  vars_files:
    - group_vars/all/common.yml
    - group_vars/all/vault.yml

  tasks:
    - name: Ensure pipeline app directory exists
      file:
        path: "{{ playbook_dir }}/pipeline-app"
        state: directory

    - name: Create simple index.html if not exists
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
              <title>Pipeline App - Built with Ansible</title>
          </head>
          <body>
              <h1>ðŸš€ Hello from Pipeline App!</h1>
              <p>Version: {{ image_tag }}</p>
              <p>Built with Jenkins + Ansible + Docker</p>
              <p>Timestamp: {{ ansible_date_time.iso8601 }}</p>
          </body>
          </html>
        dest: "{{ playbook_dir }}/pipeline-app/index.html"
        mode: '0644'
      when: not lookup('file', playbook_dir + '/pipeline-app/index.html') | length > 0

    - name: Build application image with progressive tagging
      command: >
        {{ container_cli }} build
        --label "build_date={{ ansible_date_time.iso8601 }}"
        --label "version={{ image_tag }}"
        --label "maintainer=ansible-pipeline"
        -t {{ registry_name }}/pipeline-app:{{ image_tag }}
        -t {{ registry_name }}/pipeline-app:latest
        {{ playbook_dir }}/pipeline-app
      args:
        chdir: "{{ playbook_dir }}"
      register: build_result

    - name: Show build output
      debug:
        msg: "{{ build_result.stdout }}"

    - name: Push versioned image to registry
      command: >
        {{ container_cli }} push {{ registry_name }}/pipeline-app:{{ image_tag }}
      register: push_result
      retries: 3
      delay: 5
      until: push_result.rc == 0

    - name: Push latest tag to registry
      command: >
        {{ container_cli }} push {{ registry_name }}/pipeline-app:latest
      register: push_latest_result
      retries: 3
      delay: 5
      until: push_latest_result.rc == 0

    - name: Verify image in registry
      command: >
        curl -s http://host.docker.internal:5000/v2/pipeline-app/tags/list
      register: registry_check
      failed_when: false  # Non fallire se la verifica non funziona
      changed_when: false

    - name: Show registry contents
      debug:
        msg: "Registry response: {{ registry_check.stdout }}"
      when: registry_check.rc == 0
