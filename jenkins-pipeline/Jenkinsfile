pipeline {
    agent any
    
    environment {
        REGISTRY = "localhost:5000"
        ANSIBLE_DIR = "/var/jenkins_home/ansible"
        SSH_KEY = credentials('ansible-ssh-key')
        VAULT_PASSWORD = credentials('ansible-vault-password')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/your-username/formazione_cm.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                mkdir -p ${ANSIBLE_DIR}
                cp -r * ${ANSIBLE_DIR}/
                echo "${SSH_KEY}" > ${ANSIBLE_DIR}/files/ssh-keys/id_rsa
                chmod 600 ${ANSIBLE_DIR}/files/ssh-keys/id_rsa
                echo "${VAULT_PASSWORD}" > ${ANSIBLE_DIR}/.vault-pass
                chmod 600 ${ANSIBLE_DIR}/.vault-pass
                '''
            }
        }
        
        stage('Build Image') {
            steps {
                script {
                    def version = sh(script: 'date +%Y%m%d%H%M%S', returnStdout: true).trim()
                    env.IMAGE_TAG = version
                    
                    sh """
                    cd ${ANSIBLE_DIR}
                    ansible-playbook -i inventory.ini build-pipeline.yml \
                    -e "image_tag=${version}" \
                    --vault-password-file .vault-pass
                    """
                }
            }
        }
        
        stage('Deploy with Ansible') {
            steps {
                sh """
                cd ${ANSIBLE_DIR}
                ansible-playbook -i inventory.ini deploy-pipeline.yml \
                -e "image_tag=${IMAGE_TAG}" \
                --vault-password-file .vault-pass
                """
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully! Image tag: ${IMAGE_TAG}"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}