---
- name: Stop and remove existing containers
  command: "{{ container_cli }} stop {{ item.name }} || true"
  args:
    creates: "{{ container_cli }} container exists {{ item.name }}"
  loop: "{{ containers }}"
  failed_when: false

- name: Remove existing containers
  command: "{{ container_cli }} rm {{ item.name }} || true"
  args:
    creates: "{{ container_cli }} container exists {{ item.name }}"
  loop: "{{ containers }}"
  failed_when: false

- name: Run SSH containers
  command: >
    {{ container_cli }} run -d --name {{ item.name }} 
    -p {{ item.ssh_port }}:22 
    --restart=unless-stopped 
    {{ registry_name }}/{{ item.name }}:latest
  loop: "{{ containers }}"
  when: item.name != 'jenkins'
  loop_control:
    label: "{{ item.name }}"

- name: Run Jenkins container
  command: >
    {{ container_cli }} run -d --name {{ item.name }} 
    -p {{ item.web_port }}:8080 
    -p {{ item.agent_port }}:50000 
    --restart=unless-stopped 
    {% for volume in item.volumes %}
    -v {{ volume }}
    {% endfor %}
    {{ registry_name }}/{{ item.name }}:latest
  loop: "{{ containers }}"
  when: item.name == 'jenkins'
  loop_control:
    label: "{{ item.name }}"

- name: Verify containers are running
  command: "{{ container_cli }} ps --filter name={{ item.name }}"
  register: container_status
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"

- name: Show container status
  debug:
    msg: "Container {{ item.item.name }} status: {{ item.stdout }}"
  loop: "{{ container_status.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Show connection instructions
  debug:
    msg: |
      {% if item.name != 'jenkins' %}
      Per connettersi via SSH a {{ item.name }}:
      ssh -i files/ssh-keys/id_rsa -p {{ item.ssh_port }} ansible-user@localhost
      {% else %}
      Jenkins Ã¨ disponibile all'indirizzo:
      http://localhost:{{ item.web_port }}
      {% endif %}
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"