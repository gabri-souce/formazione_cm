---
- name: Check if Docker is installed
  command: which docker
  register: docker_installed
  failed_when: false
  changed_when: false

- name: Install Docker (macOS - manual instruction)
  debug:
    msg: |
      Docker non Ã¨ installato su macOS.
      Per installarlo:
      1. Scarica Docker Desktop da: https://www.docker.com/products/docker-desktop/
      2. Installa e avvia Docker Desktop
      3. Assicurati che Docker sia in esecuzione prima di continuare
  when: docker_installed.rc != 0 and is_macos

- name: Fail if Docker not installed on macOS
  fail:
    msg: "Docker non installato. Seguire le istruzioni sopra."
  when: docker_installed.rc != 0 and is_macos

- name: Start Docker Desktop (macOS)
  command: open -a Docker
  when: is_macos
  failed_when: false
  changed_when: false

- name: Wait for Docker to be ready (macOS)
  pause:
    seconds: 10
  when: is_macos

- name: Pull registry image
  command: "{{ container_cli }} pull registry:2"
  args:
    creates: "{{ container_cli }} image exists registry:2"

- name: Create registry data directory (macOS)
  file:
    path: "{{ registry_data_dir }}"
    state: directory
    mode: '0755'
  when: is_macos

- name: Create registry data directory (Linux)
  file:
    path: "{{ registry_data_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: not is_macos
  become: yes

- name: Check if registry container already exists
  command: "{{ container_cli }} ps -a --filter name=registry --format '{{'{{.Names}}'}}'"
  register: registry_exists
  changed_when: false

- name: Remove existing registry container
  command: "{{ container_cli }} rm -f registry"
  when: registry_exists.stdout == "registry"
  failed_when: false

- name: Run registry container
  command: >
    {{ container_cli }} run -d --name registry 
    -p {{ registry_port }}:5000 
    -v {{ registry_data_dir }}:/var/lib/registry 
    --restart=always 
    registry:2
  register: registry_result

- name: Ensure registry is running
  command: "{{ container_cli }} start registry"
  when: registry_result.rc != 0
  failed_when: false

- name: Verify registry is running
  command: "{{ container_cli }} ps --filter name=registry"
  register: registry_status
  changed_when: false

- name: Show registry status
  debug:
    msg: "Registry container status: {{ registry_status.stdout }}"