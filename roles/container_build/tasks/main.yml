---
- name: Create SSH keys directory
  file:
    path: "{{ playbook_dir }}/files/ssh-keys"
    state: directory
    mode: '0700'

- name: Generate SSH key pair if not exists
  openssh_keypair:
    path: "{{ playbook_dir }}/{{ ssh_private_key }}"
    type: rsa
    size: 2048
    force: true
    state: present

- name: Read SSH public key content
  slurp:
    src: "{{ playbook_dir }}/{{ ssh_public_key }}"
  register: ssh_key_content

- name: Create image directories
  file:
    path: "{{ playbook_dir }}/{{ item.context }}"
    state: directory
  loop: "{{ containers }}"

- name: Copy SSH public key to image directories
  copy:
    content: "{{ ssh_key_content.content | b64decode }}"
    dest: "{{ playbook_dir }}/{{ item.context }}/authorized_keys"
    mode: '0644'
  loop: "{{ containers }}"

#- name: Build container images
 # command: >
  #  {{ container_cli }} build 
   # -t {{ registry_name }}/{{ item.name }}:{{ item.tags[0] }} 
    #-f {{ playbook_dir }}/{{ item.dockerfile }} 
    #{{ playbook_dir }}/{{ item.context }}
 # loop: "{{ containers }}"
  #loop_control:
   # label: "{{ item.name }}"

- name: Push images to registry
  command: "{{ container_cli }} push {{ registry_name }}/{{ item.name }}:{{ item.tags[0] }}"
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  failed_when: false  # Potrebbe fallire su macOS se il registry non Ã¨ accessibile

- name: Build container images with vault variables
  command: >
    {{ container_cli }} build 
    --build-arg SSH_USER_PASSWORD={{ ssh_user_password }}
    -t {{ registry_name }}/{{ item.name }}:{{ item.tags[0] }} 
    -f {{ playbook_dir }}/{{ item.dockerfile }} 
    {{ playbook_dir }}/{{ item.context }}
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  #no_log: true  # Hide passwords from logs
  when: item.name != "jenkins"  # Exclude Jenkins from this build method

- name: Build Jenkins image (without SSH password)
  command: >
    {{ container_cli }} build 
    -t {{ registry_name }}/{{ item.name }}:{{ item.tags[0] }} 
    -f {{ playbook_dir }}/{{ item.dockerfile }} 
    {{ playbook_dir }}/{{ item.context }}
  loop: "{{ containers }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.name == "jenkins"  # Build solo per jenkins
